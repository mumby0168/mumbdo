@inherits MudFormBase
@inject IItemGroupManager ItemGroupManager





<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Class="add-g-dialog-container">
            <MudForm @ref="Form" bind-IsValid="@IsFormValid">
                <MudTextField Variant="Variant.Filled" @bind-Value="@Name" T="string" Label="Name" Required="true" RequiredError="A name is required."/>
                <br/>
                <MudTextField Variant="Variant.Filled" @bind-Value="@Description" Label="Description" T="string" Lines="2"/>
                <br/>
            </MudForm>
            <ImagePicker @bind-ImageUri="@ImageUri"/>
            <br/>
            <MudText Color="Color.Error">@ErrorMessage</MudText>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Create</MudButton>
    </DialogActions>
    
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    string Name { get; set; }

    string Description { get; set; }

    string ImageUri = PlaceHolder;

    const string PlaceHolder = "https://images.unsplash.com/photo-1500423079914-b65af272b8db?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxjb2xsZWN0aW9uLXBhZ2V8MXwxMzQ0NTA3fHxlbnwwfHx8&w=1000&q=80";

    async Task Submit()
    {
        Form.Validate();
        if (Form.IsValid)
        {
            var error = await ItemGroupManager.AddGroupAsync(new ItemGroupDto(Guid.NewGuid(), Name, Description, ImageUri, new List<TaskDto>()));
            if (error != string.Empty)
            {
                ErrorMessage = error;
                return;
            }

            await MudDialog.Close(DialogResult.Ok(true));
        }
    }
    void Cancel() => MudDialog.Cancel();
}