@inherits MudFormBase
@inject IGroupProxy GroupProxy
@inject ITaskProxy TaskProxy

<MudDialog>
    <DialogContent>
        <MudForm @ref="Form" @bind-IsValid="@IsFormValid">
            <MudTextField Variant="Variant.Filled" Label="Name" @bind-Value="Name" Required="true"></MudTextField>
            <br/>
            <MudSelect Label="Group" Variant="Variant.Filled" @bind-Value="@GroupId">
                <MudSelectItem Value="@((Guid?) Guid.Empty)">None</MudSelectItem>
                @foreach (var group in Groups)
                {
                    <MudSelectItem Value="(Guid?) group.Id">@group.Name</MudSelectItem>
                }
            </MudSelect>
            <br/>
            @if (!SetDeadline)
            {
                <MudButton OnClick="() => ToggleSetDeadline(true)">Set Deadline</MudButton>
            }
            @if (SetDeadline)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Set a deadline</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <div align="center">
                                    <MudDatePicker @bind-Date="@DeadlineDate" DateFormat="dd/MM/yyyy" MinDate="DateTime.Now" Label="Date" Rounded="true" PickerVariant="PickerVariant.Dialog" Color="Color.Secondary"></MudDatePicker>
                                </div>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <div align="center">
                                    <MudTimePicker @bind-Time="@DeadlineTime" Label="Time" PickerVariant="PickerVariant.Dialog"></MudTimePicker>
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Error" OnClick="() => ToggleSetDeadline(false)">Cancel</MudButton>
                    </MudCardActions>
                </MudCard>
            }
        </MudForm>
        
        <MudText Color="Color.Error">@ErrorMessage</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    void ToggleSetDeadline(bool set)
    {
        if (set == SetDeadline) return;
        if (set)
        {
            DeadlineDate = DateTime.Now.AddDays(1);
            DeadlineTime = DateTime.Now.AddHours(4).TimeOfDay;
        }
        else
        {
            DeadlineDate = null;
            DeadlineTime = null;
        }
        SetDeadline = set;  
    }

    void ProcessDeadline()
    {
        if (SetDeadline)
        {
            var date = DeadlineDate.Value;
            var time = DeadlineTime.Value;
            DeadlineDate = new DateTime(date.Year, date.Month, date.Day, time.Hours, time.Minutes, time.Seconds);
        }
    }

    bool SetDeadline = false;

    Guid? GroupId = Guid.Empty;

    string Name = string.Empty;

    DateTime? DeadlineDate = null;

    TimeSpan? DeadlineTime = null;
    
    DateTime? Min = DateTime.Now;

    IEnumerable<ItemGroupDto> Groups = new List<ItemGroupDto>();
    
    [Parameter]
    public Guid? ChosenGroupId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Groups = await GroupProxy.GetGroupsAsync();
        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        if (ChosenGroupId is not null)
            GroupId = ChosenGroupId;
        base.OnParametersSet();
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    async Task Submit()
    {
        ProcessDeadline();
        Form.Validate();
        
        if (Form.IsValid)
        {
            await TaskProxy.CreateAsync(Name, GroupId == Guid.Empty ? null : GroupId, DeadlineDate);
            var error = TaskProxy.ErrorMessage;
            if (error != String.Empty)
            {
                ErrorMessage = error;
                return;
            }
        }
        
        await MudDialog.Close(DialogResult.Ok(true));
    } 
    void Cancel() => MudDialog.Cancel();
}