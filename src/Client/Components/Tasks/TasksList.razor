
@inject IConfirmationService ConfirmationService
@inject ITaskProxy TaskProxy


@code {

    [Parameter]
    public List<TaskDto> Tasks { get; set; }
    
    [Parameter]
    public Func<Task> UpdateTasksAsync { get; set; }

    private async Task OnCompleteAsync(Guid id)
    {
        var accepted = await ConfirmationService.ConfirmAsync("Are you sure you want to complete this task");
        if (accepted)
        {
            await CompleteAsync(id);
        }
    }

    private async Task UnGroupAsync(Guid id)
    {
        var task = Tasks.FirstOrDefault(t => t.Id == id);
        
        if(task is null)
            return;
        
        await TaskProxy.UpdateAsync(task.Id, task.Name, task.IsComplete, null, task.Deadline);
        var error = TaskProxy.ErrorMessage;
        if (error != string.Empty)
        {
            Console.WriteLine($@"Error: {error}");
            return;
        }
        await UpdateTasksAsync();
    }
    

    private async Task CompleteAsync(Guid id)
    {
        var task = Tasks.FirstOrDefault(t => t.Id == id);
        
        if(task is null)
            return;
        
        await TaskProxy.UpdateAsync(task.Id, task.Name, true, task.GroupId, task.Deadline);
        var error = TaskProxy.ErrorMessage;
        if (error != string.Empty)
        {
            Console.WriteLine($@"Error: {error}");
            return;
        }
        await UpdateTasksAsync();
    }

    private async Task OnDeleteAsync(Guid id)
    {
        var accepted = await ConfirmationService.ConfirmAsync("Are you sure you want to delete this task");
        if (accepted)
        {
            await TaskProxy.DeleteAsync(id);
            var error = TaskProxy.ErrorMessage;
            if (error != string.Empty)
            {
                Console.WriteLine($@"Error: {error}");
                return;
            }
            await UpdateTasksAsync();
        }
    }

}

<MudGrid Spacing="2">
    @foreach (var task in Tasks.OrderBy(t => t.Created))
    {
        <MudItem xs="12" sm="6" md="3" lg="2">
            <MudCard Elevation="5" >
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Secondary"><MudIcon Icon="@Icons.Material.OfflinePin"></MudIcon></MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body2">@task.Name</MudText>
                        <MudText Typo="Typo.caption">@task.Created.ToString("dd/MM/yyyy")</MudText>
                    </CardHeaderContent>
                     <CardHeaderActions>
                            <MudMenu Icon="@Icons.Material.MoreVert" Dense="true">
                                <MudMenuItem OnClick="() => OnDeleteAsync(task.Id)">Delete</MudMenuItem>
                                @if (task.GroupId is not null)
                                {
                                    <MudMenuItem OnClick="() => UnGroupAsync(task.Id)">Ungroup</MudMenuItem>    
                                }
                            </MudMenu>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardActions>
                    @if (task.IsComplete)
                    {
                        <MudButton StartIcon="@Icons.Material.Redo" Variant="Variant.Filled" Color="Color.Warning" Size="Size.Small">Revert</MudButton>
                        <MudButton StartIcon="@Icons.Material.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small">Delete</MudButton>
                    }
                    else
                    {
                        <MudButton OnClick="() => OnCompleteAsync(task.Id)" StartIcon="@Icons.Material.Check" Variant="Variant.Filled" Color="Color.Success" Size="Size.Small">Complete</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    }
</MudGrid>



