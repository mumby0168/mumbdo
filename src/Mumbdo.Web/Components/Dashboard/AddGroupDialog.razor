@inject ITaskGroupManager TaskGroupManager



<MudDialog>
    <DialogContent>
        <MudForm @ref="Form" bind-IsValid="@IsValid">
            <MudTextField @bind-Value="@Name" T="string" Label="Name" Required="true" RequiredError="A name is required."/>
            <br/>
            <MudTextField @bind-Value="@Description" Label="Description" T="string" Lines="2" />
            <br/>
        </MudForm>
        <ImagePicker @bind-ImageUri="@ImageUri"/>
        <br/>
        <MudText Color="Color.Error">@ErrorText</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    string Name { get; set; }

    string Description { get; set; }

    bool IsValid;

    string ErrorText;

    MudForm Form;

    string ImageUri = PlaceHolder;

    const string PlaceHolder = "https://images.unsplash.com/photo-1500423079914-b65af272b8db?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxjb2xsZWN0aW9uLXBhZ2V8MXwxMzQ0NTA3fHxlbnwwfHx8&w=1000&q=80";

    async Task Submit()
    {
        Form.Validate();
        if (Form.IsValid)
        {
            Console.WriteLine(Name);
            Console.WriteLine(Description);
            var error = await TaskGroupManager.AddGroupAsync(new ItemGroupDto(Guid.NewGuid(), Name, Description, ImageUri));
            if (error != string.Empty)
            {
                ErrorText = error;
                return;
            }

            await MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Console.WriteLine("Form Invalid");
        }
    }
    void Cancel() => MudDialog.Cancel();
}